[{"role": "assistant", "content": "Choose any Repo. I will help you analyzing, optimizing or querying the data you provide me."}, {"role": "user", "content": "Improve this code so it can also search for codefiles in different directories like \"from query_db import search_by_shorturl\" should look for \"query_db .py\""}, {"role": "assistant", "content": "To improve the provided code so that it can search for code files in different directories with the pattern you described (i.e., supporting imports like `from query_db import search_by_shorturl`), we need to adjust the regex pattern to accommodate for both relative and absolute imports. \n\nHere\u2019s the updated code:\n\n```python\nimport re\nfrom query_db import search_by_shorturl\n\ncode = \"\"\"\n    from enum import Enum\n    from typing import ClassVar\n\n    from .azure_ai_search import AzureAISearch\n    from .lancedb import LanceDBVectorStore\n    from query_db import search_by_shorturl\n\"\"\"\n\ndef local_search(table, directory, code):\n    # Updated pattern to match both relative and absolute imports\n    pattern = re.compile(r'from (\\.(\\w+)|(\\w+)) import (\\w+)')\n    result = {}\n    context = \"\"\n\n    matches = pattern.findall(code)\n\n    for match in matches:\n        relative_import = match[1]\n        absolute_import = match[2]\n        module = match[3]\n        \n        # Determine the file name based on whether import is relative or absolute\n        if relative_import:\n            file_name = f\"{directory}/{relative_import}.py\"\n        else:\n            file_name = f\"{absolute_import}.py\"\n\n        result[file_name] = module\n\n    for i in result.keys():\n        file = search_by_shorturl(table, i)\n        context += f\"Context for {file[2]} \\n\\n\" + file[3] + \"\\n\"\n    return context\n\ndirectory = \"vector_stores\"\ntable = \"microsoft_graph\"\n\ncontext = local_search(table, directory, code)\n\nprint(context)\n```\n\n### Changes Made:\n1. **Updated Regex Pattern**: The regex pattern has been changed to handle both relative imports (e.g., `from .module import func`) and absolute imports (e.g., `from module import func`). The pattern now captures both conditions.\n\n2. **Logic to Determine File Name**: I added logic to determine if the import is relative or absolute and constructs the file path accordingly.\n\n3. **General Enhancements**: Minor adjustments were made to ensure clearer variable names and logic consistency.\n\nNow, the function `local_search` should be able to process both types of import statements correctly."}]